// Fixes
Sample Data Script: 
    Update the sample data to create 3–5 players with $1000 equivalent split between BTC and ETH (e.g., $500 each). This supports testing multiple bets (e.g., $10–$100 bets) without awkward amounts like $9558.60. The sample data is for testing purposes, to simulate a realistic environment with multiple players placing bets and cashing out.
However, the 3-5 player requirement suggests the evaluators expect a dataset to test multiplayer scenarios (e.g., multiple bets in a round, cashout notifications across players). The only player-specific broadcast is player_cashout (with player_id, crypto payout, USD equivalent), which doesn’t mandate identifying players beyond an ID.
Add a Sample Data Script: Create a separate script to populate 3-5 player wallets and a few game rounds (e.g., with bets and cashouts) to meet the assignment’s requirement. This script is for evaluators to test the backend, not for runtime use. It should:
Insert 3-5 players with initial balances (e.g., $1000 equivalent in BTC/ETH, split evenly).
Create 2-3 past rounds with sample bets and outcomes (e.g., some cashed out, some lost)
No Need for Player Visibility: You don’t need to show other players’ IDs or actions in the frontend beyond the required cashout notifications (e.g., “Player XYZ cashed out $20”).




Show a total USD balance first (e.g., “Total: $11,374.64”), calculated as                                   
BTC balance * BTC price + ETH balance * ETH price.
List BTC and ETH balances below, with USD equivalents in parentheses (e.g., “BTC: 0.09872955 ($9558.60), ETH: 1 ($1816.04)”).
Use formatting to reduce precision (e.g., round crypto to 6 decimals, USD to 2 decimals) for cleaner display.
Emphasize USD in the UI to align with the user’s betting experience (since bets are in USD).

Initialize wallets with crypto equivalent to a round USD amount (e.g., $1000 total). $500 in BTC $500 in ETH



You must fetch live prices from a public API and use the price at the moment a bet is placed for USD-to-crypto conversion. 
he crypto amount deducted from the wallet must reflect the price when the bet request is processed, not a stale cached price.
You have flexibility in how to cache prices, as long as they’re stored temporarily and refreshed every 10 seconds.
Each round is "created" 10 seconds earlier so cache that and during "starting", just use that cached values for converting the betting amounts